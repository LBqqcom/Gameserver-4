// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: gameserver_msgheader.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "gameserver_msgheader.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gameserver_proto {
class LoginRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginRequest> {
} _LoginRequest_default_instance_;
class LoginResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LoginResponse> {
} _LoginResponse_default_instance_;
class RequestRoleInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestRoleInfo> {
} _RequestRoleInfo_default_instance_;
class ResponseRoleInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseRoleInfo> {
} _ResponseRoleInfo_default_instance_;
class SendChatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SendChat> {
} _SendChat_default_instance_;
class RecvChatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RecvChat> {
} _RecvChat_default_instance_;
class MsgItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MsgItem> {
} _MsgItem_default_instance_;
class FriendItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FriendItem> {
} _FriendItem_default_instance_;
class RequestFrinedsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestFrineds> {
} _RequestFrineds_default_instance_;
class ResponseFriendsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseFriends> {
} _ResponseFriends_default_instance_;
class RequestAddFriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestAddFriend> {
} _RequestAddFriend_default_instance_;
class ResponseAddFriendDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseAddFriend> {
} _ResponseAddFriend_default_instance_;
class RequestOfflineMsgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RequestOfflineMsgs> {
} _RequestOfflineMsgs_default_instance_;
class ResponseOfflineMsgsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResponseOfflineMsgs> {
} _ResponseOfflineMsgs_default_instance_;

namespace protobuf_gameserver_5fmsgheader_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[14];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginRequest, key_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LoginResponse, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestRoleInfo, rid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleInfo, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseRoleInfo, reqrid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, did_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, msg_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendChat, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, sid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, msg_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, sname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RecvChat, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, srid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, msg_size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, stime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, sname_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgItem, msg_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendItem, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendItem, rid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendItem, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendItem, timeline_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendItem, username_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFrineds, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestFrineds, type_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFriends, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseFriends, friends_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAddFriend, arid_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddFriend, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddFriend, status_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseAddFriend, friend__),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfflineMsgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfflineMsgs, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfflineMsgs, rrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestOfflineMsgs, count_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOfflineMsgs, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOfflineMsgs, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResponseOfflineMsgs, msgs_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(LoginRequest)},
  { 7, -1, sizeof(LoginResponse)},
  { 15, -1, sizeof(RequestRoleInfo)},
  { 21, -1, sizeof(ResponseRoleInfo)},
  { 28, -1, sizeof(SendChat)},
  { 38, -1, sizeof(RecvChat)},
  { 51, -1, sizeof(MsgItem)},
  { 65, -1, sizeof(FriendItem)},
  { 74, -1, sizeof(RequestFrineds)},
  { 80, -1, sizeof(ResponseFriends)},
  { 86, -1, sizeof(RequestAddFriend)},
  { 92, -1, sizeof(ResponseAddFriend)},
  { 99, -1, sizeof(RequestOfflineMsgs)},
  { 107, -1, sizeof(ResponseOfflineMsgs)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginRequest_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_LoginResponse_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestRoleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseRoleInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_SendChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RecvChat_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_MsgItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_FriendItem_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestFrineds_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseFriends_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestAddFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseAddFriend_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_RequestOfflineMsgs_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_ResponseOfflineMsgs_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "gameserver_msgheader.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 14);
}

}  // namespace

void TableStruct::Shutdown() {
  _LoginRequest_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _LoginResponse_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _RequestRoleInfo_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _ResponseRoleInfo_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
  _SendChat_default_instance_.Shutdown();
  delete file_level_metadata[4].reflection;
  _RecvChat_default_instance_.Shutdown();
  delete file_level_metadata[5].reflection;
  _MsgItem_default_instance_.Shutdown();
  delete file_level_metadata[6].reflection;
  _FriendItem_default_instance_.Shutdown();
  delete file_level_metadata[7].reflection;
  _RequestFrineds_default_instance_.Shutdown();
  delete file_level_metadata[8].reflection;
  _ResponseFriends_default_instance_.Shutdown();
  delete file_level_metadata[9].reflection;
  _RequestAddFriend_default_instance_.Shutdown();
  delete file_level_metadata[10].reflection;
  _ResponseAddFriend_default_instance_.Shutdown();
  delete file_level_metadata[11].reflection;
  _RequestOfflineMsgs_default_instance_.Shutdown();
  delete file_level_metadata[12].reflection;
  _ResponseOfflineMsgs_default_instance_.Shutdown();
  delete file_level_metadata[13].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _LoginRequest_default_instance_.DefaultConstruct();
  _LoginResponse_default_instance_.DefaultConstruct();
  _RequestRoleInfo_default_instance_.DefaultConstruct();
  _ResponseRoleInfo_default_instance_.DefaultConstruct();
  _SendChat_default_instance_.DefaultConstruct();
  _RecvChat_default_instance_.DefaultConstruct();
  _MsgItem_default_instance_.DefaultConstruct();
  _FriendItem_default_instance_.DefaultConstruct();
  _RequestFrineds_default_instance_.DefaultConstruct();
  _ResponseFriends_default_instance_.DefaultConstruct();
  _RequestAddFriend_default_instance_.DefaultConstruct();
  _ResponseAddFriend_default_instance_.DefaultConstruct();
  _RequestOfflineMsgs_default_instance_.DefaultConstruct();
  _ResponseOfflineMsgs_default_instance_.DefaultConstruct();
  _ResponseAddFriend_default_instance_.get_mutable()->friend__ = const_cast< ::gameserver_proto::FriendItem*>(
      ::gameserver_proto::FriendItem::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\032gameserver_msgheader.proto\022\020gameserver"
      "_proto\"(\n\014LoginRequest\022\013\n\003rid\030\001 \001(\005\022\013\n\003k"
      "ey\030\002 \001(\t\"9\n\rLoginResponse\022\016\n\006status\030\001 \001("
      "\005\022\013\n\003rid\030\002 \001(\005\022\013\n\003msg\030\003 \001(\t\"\036\n\017RequestRo"
      "leInfo\022\013\n\003rid\030\001 \001(\005\"/\n\020ResponseRoleInfo\022"
      "\013\n\003rid\030\001 \001(\005\022\016\n\006reqrid\030\002 \001(\005\"U\n\010SendChat"
      "\022\013\n\003rid\030\001 \001(\005\022\013\n\003did\030\002 \001(\005\022\020\n\010msg_type\030\003"
      " \001(\005\022\020\n\010msg_size\030\004 \001(\005\022\013\n\003msg\030\005 \001(\t\"\177\n\010R"
      "ecvChat\022\013\n\003rid\030\001 \001(\005\022\013\n\003sid\030\002 \001(\005\022\014\n\004typ"
      "e\030\003 \001(\005\022\020\n\010msg_type\030\004 \001(\005\022\013\n\003tid\030\005 \001(\005\022\020"
      "\n\010msg_size\030\006 \001(\005\022\r\n\005sname\030\007 \001(\t\022\013\n\003msg\030\010"
      " \001(\t\"\216\001\n\007MsgItem\022\013\n\003rid\030\001 \001(\005\022\014\n\004srid\030\002 "
      "\001(\005\022\014\n\004type\030\003 \001(\005\022\020\n\010msg_type\030\004 \001(\005\022\013\n\003t"
      "id\030\005 \001(\005\022\020\n\010msg_size\030\006 \001(\005\022\r\n\005stime\030\007 \001("
      "\005\022\r\n\005sname\030\010 \001(\t\022\013\n\003msg\030\t \001(\t\"M\n\nFriendI"
      "tem\022\013\n\003rid\030\001 \001(\005\022\016\n\006status\030\002 \001(\005\022\020\n\010time"
      "line\030\003 \001(\005\022\020\n\010username\030\004 \001(\t\"\036\n\016RequestF"
      "rineds\022\014\n\004type\030\001 \001(\005\"@\n\017ResponseFriends\022"
      "-\n\007friends\030\001 \003(\0132\034.gameserver_proto.Frie"
      "ndItem\" \n\020RequestAddFriend\022\014\n\004arid\030\001 \001(\005"
      "\"Q\n\021ResponseAddFriend\022\016\n\006status\030\001 \001(\005\022,\n"
      "\006friend\030\002 \001(\0132\034.gameserver_proto.FriendI"
      "tem\"\?\n\022RequestOfflineMsgs\022\014\n\004type\030\001 \001(\005\022"
      "\014\n\004rrid\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"M\n\023Response"
      "OfflineMsgs\022\r\n\005count\030\001 \001(\005\022\'\n\004msgs\030\002 \003(\013"
      "2\031.gameserver_proto.MsgItemb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1035);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "gameserver_msgheader.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_gameserver_5fmsgheader_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginRequest::kRidFieldNumber;
const int LoginRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginRequest::LoginRequest()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.LoginRequest)
}
LoginRequest::LoginRequest(const LoginRequest& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  rid_ = from.rid_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.LoginRequest)
}

void LoginRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_ = 0;
  _cached_size_ = 0;
}

LoginRequest::~LoginRequest() {
  // @@protoc_insertion_point(destructor:gameserver_proto.LoginRequest)
  SharedDtor();
}

void LoginRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginRequest::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginRequest& LoginRequest::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginRequest* LoginRequest::New(::google::protobuf::Arena* arena) const {
  LoginRequest* n = new LoginRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.LoginRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  rid_ = 0;
}

bool LoginRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.LoginRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string key = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.LoginRequest.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.LoginRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.LoginRequest)
  return false;
#undef DO_
}

void LoginRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.LoginRequest.key");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.LoginRequest)
}

::google::protobuf::uint8* LoginRequest::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.LoginRequest)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // string key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.LoginRequest.key");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->key(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.LoginRequest)
  return target;
}

size_t LoginRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.LoginRequest)
  size_t total_size = 0;

  // string key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->key());
  }

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginRequest::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginRequest* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginRequest>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.LoginRequest)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.LoginRequest)
    MergeFrom(*source);
  }
}

void LoginRequest::MergeFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.LoginRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
}

void LoginRequest::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginRequest::CopyFrom(const LoginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.LoginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginRequest::IsInitialized() const {
  return true;
}

void LoginRequest::Swap(LoginRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginRequest::InternalSwap(LoginRequest* other) {
  key_.Swap(&other->key_);
  std::swap(rid_, other->rid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginRequest::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginRequest

// int32 rid = 1;
void LoginRequest::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 LoginRequest::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.LoginRequest.rid)
  return rid_;
}
void LoginRequest::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.LoginRequest.rid)
}

// string key = 2;
void LoginRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginRequest::key() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.LoginRequest.key)
  return key_.GetNoArena();
}
void LoginRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.LoginRequest.key)
}
#if LANG_CXX11
void LoginRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.LoginRequest.key)
}
#endif
void LoginRequest::set_key(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.LoginRequest.key)
}
void LoginRequest::set_key(const char* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.LoginRequest.key)
}
::std::string* LoginRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.LoginRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginRequest::release_key() {
  // @@protoc_insertion_point(field_release:gameserver_proto.LoginRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.LoginRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LoginResponse::kStatusFieldNumber;
const int LoginResponse::kRidFieldNumber;
const int LoginResponse::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LoginResponse::LoginResponse()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.LoginResponse)
}
LoginResponse::LoginResponse(const LoginResponse& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&status_, &from.status_,
    reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&status_) + sizeof(rid_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.LoginResponse)
}

void LoginResponse::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&status_) + sizeof(rid_));
  _cached_size_ = 0;
}

LoginResponse::~LoginResponse() {
  // @@protoc_insertion_point(destructor:gameserver_proto.LoginResponse)
  SharedDtor();
}

void LoginResponse::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LoginResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LoginResponse::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const LoginResponse& LoginResponse::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

LoginResponse* LoginResponse::New(::google::protobuf::Arena* arena) const {
  LoginResponse* n = new LoginResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LoginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.LoginResponse)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&status_, 0, reinterpret_cast<char*>(&rid_) -
    reinterpret_cast<char*>(&status_) + sizeof(rid_));
}

bool LoginResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.LoginResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.LoginResponse.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.LoginResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.LoginResponse)
  return false;
#undef DO_
}

void LoginResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // int32 rid = 2;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rid(), output);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.LoginResponse.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.LoginResponse)
}

::google::protobuf::uint8* LoginResponse::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.LoginResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // int32 rid = 2;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rid(), target);
  }

  // string msg = 3;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.LoginResponse.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.LoginResponse)
  return target;
}

size_t LoginResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.LoginResponse)
  size_t total_size = 0;

  // string msg = 3;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 rid = 2;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LoginResponse::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const LoginResponse* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const LoginResponse>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.LoginResponse)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.LoginResponse)
    MergeFrom(*source);
  }
}

void LoginResponse::MergeFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.LoginResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
}

void LoginResponse::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LoginResponse::CopyFrom(const LoginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.LoginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LoginResponse::IsInitialized() const {
  return true;
}

void LoginResponse::Swap(LoginResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LoginResponse::InternalSwap(LoginResponse* other) {
  msg_.Swap(&other->msg_);
  std::swap(status_, other->status_);
  std::swap(rid_, other->rid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata LoginResponse::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LoginResponse

// int32 status = 1;
void LoginResponse::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 LoginResponse::status() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.LoginResponse.status)
  return status_;
}
void LoginResponse::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.LoginResponse.status)
}

// int32 rid = 2;
void LoginResponse::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 LoginResponse::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.LoginResponse.rid)
  return rid_;
}
void LoginResponse::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.LoginResponse.rid)
}

// string msg = 3;
void LoginResponse::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LoginResponse::msg() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.LoginResponse.msg)
  return msg_.GetNoArena();
}
void LoginResponse::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.LoginResponse.msg)
}
#if LANG_CXX11
void LoginResponse::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.LoginResponse.msg)
}
#endif
void LoginResponse::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.LoginResponse.msg)
}
void LoginResponse::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.LoginResponse.msg)
}
::std::string* LoginResponse::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.LoginResponse.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LoginResponse::release_msg() {
  // @@protoc_insertion_point(field_release:gameserver_proto.LoginResponse.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LoginResponse::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.LoginResponse.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestRoleInfo::kRidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestRoleInfo::RequestRoleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.RequestRoleInfo)
}
RequestRoleInfo::RequestRoleInfo(const RequestRoleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rid_ = from.rid_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.RequestRoleInfo)
}

void RequestRoleInfo::SharedCtor() {
  rid_ = 0;
  _cached_size_ = 0;
}

RequestRoleInfo::~RequestRoleInfo() {
  // @@protoc_insertion_point(destructor:gameserver_proto.RequestRoleInfo)
  SharedDtor();
}

void RequestRoleInfo::SharedDtor() {
}

void RequestRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestRoleInfo::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestRoleInfo& RequestRoleInfo::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestRoleInfo* RequestRoleInfo::New(::google::protobuf::Arena* arena) const {
  RequestRoleInfo* n = new RequestRoleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.RequestRoleInfo)
  rid_ = 0;
}

bool RequestRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.RequestRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.RequestRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.RequestRoleInfo)
  return false;
#undef DO_
}

void RequestRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.RequestRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.RequestRoleInfo)
}

::google::protobuf::uint8* RequestRoleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.RequestRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.RequestRoleInfo)
  return target;
}

size_t RequestRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.RequestRoleInfo)
  size_t total_size = 0;

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.RequestRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestRoleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestRoleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.RequestRoleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.RequestRoleInfo)
    MergeFrom(*source);
  }
}

void RequestRoleInfo::MergeFrom(const RequestRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.RequestRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid() != 0) {
    set_rid(from.rid());
  }
}

void RequestRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.RequestRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestRoleInfo::CopyFrom(const RequestRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.RequestRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestRoleInfo::IsInitialized() const {
  return true;
}

void RequestRoleInfo::Swap(RequestRoleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestRoleInfo::InternalSwap(RequestRoleInfo* other) {
  std::swap(rid_, other->rid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestRoleInfo::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestRoleInfo

// int32 rid = 1;
void RequestRoleInfo::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 RequestRoleInfo::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestRoleInfo.rid)
  return rid_;
}
void RequestRoleInfo::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestRoleInfo.rid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseRoleInfo::kRidFieldNumber;
const int ResponseRoleInfo::kReqridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseRoleInfo::ResponseRoleInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.ResponseRoleInfo)
}
ResponseRoleInfo::ResponseRoleInfo(const ResponseRoleInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&reqrid_) -
    reinterpret_cast<char*>(&rid_) + sizeof(reqrid_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.ResponseRoleInfo)
}

void ResponseRoleInfo::SharedCtor() {
  ::memset(&rid_, 0, reinterpret_cast<char*>(&reqrid_) -
    reinterpret_cast<char*>(&rid_) + sizeof(reqrid_));
  _cached_size_ = 0;
}

ResponseRoleInfo::~ResponseRoleInfo() {
  // @@protoc_insertion_point(destructor:gameserver_proto.ResponseRoleInfo)
  SharedDtor();
}

void ResponseRoleInfo::SharedDtor() {
}

void ResponseRoleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseRoleInfo::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseRoleInfo& ResponseRoleInfo::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseRoleInfo* ResponseRoleInfo::New(::google::protobuf::Arena* arena) const {
  ResponseRoleInfo* n = new ResponseRoleInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseRoleInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.ResponseRoleInfo)
  ::memset(&rid_, 0, reinterpret_cast<char*>(&reqrid_) -
    reinterpret_cast<char*>(&rid_) + sizeof(reqrid_));
}

bool ResponseRoleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.ResponseRoleInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 reqrid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.ResponseRoleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.ResponseRoleInfo)
  return false;
#undef DO_
}

void ResponseRoleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.ResponseRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // int32 reqrid = 2;
  if (this->reqrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reqrid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.ResponseRoleInfo)
}

::google::protobuf::uint8* ResponseRoleInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.ResponseRoleInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // int32 reqrid = 2;
  if (this->reqrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reqrid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.ResponseRoleInfo)
  return target;
}

size_t ResponseRoleInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.ResponseRoleInfo)
  size_t total_size = 0;

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // int32 reqrid = 2;
  if (this->reqrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->reqrid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseRoleInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.ResponseRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseRoleInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseRoleInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.ResponseRoleInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.ResponseRoleInfo)
    MergeFrom(*source);
  }
}

void ResponseRoleInfo::MergeFrom(const ResponseRoleInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.ResponseRoleInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.reqrid() != 0) {
    set_reqrid(from.reqrid());
  }
}

void ResponseRoleInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.ResponseRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseRoleInfo::CopyFrom(const ResponseRoleInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.ResponseRoleInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseRoleInfo::IsInitialized() const {
  return true;
}

void ResponseRoleInfo::Swap(ResponseRoleInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseRoleInfo::InternalSwap(ResponseRoleInfo* other) {
  std::swap(rid_, other->rid_);
  std::swap(reqrid_, other->reqrid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseRoleInfo::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseRoleInfo

// int32 rid = 1;
void ResponseRoleInfo::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 ResponseRoleInfo::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseRoleInfo.rid)
  return rid_;
}
void ResponseRoleInfo::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.ResponseRoleInfo.rid)
}

// int32 reqrid = 2;
void ResponseRoleInfo::clear_reqrid() {
  reqrid_ = 0;
}
::google::protobuf::int32 ResponseRoleInfo::reqrid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseRoleInfo.reqrid)
  return reqrid_;
}
void ResponseRoleInfo::set_reqrid(::google::protobuf::int32 value) {
  
  reqrid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.ResponseRoleInfo.reqrid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SendChat::kRidFieldNumber;
const int SendChat::kDidFieldNumber;
const int SendChat::kMsgTypeFieldNumber;
const int SendChat::kMsgSizeFieldNumber;
const int SendChat::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SendChat::SendChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.SendChat)
}
SendChat::SendChat(const SendChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.SendChat)
}

void SendChat::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
  _cached_size_ = 0;
}

SendChat::~SendChat() {
  // @@protoc_insertion_point(destructor:gameserver_proto.SendChat)
  SharedDtor();
}

void SendChat::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SendChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SendChat::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const SendChat& SendChat::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

SendChat* SendChat::New(::google::protobuf::Arena* arena) const {
  SendChat* n = new SendChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SendChat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.SendChat)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
}

bool SendChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.SendChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 did = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &did_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_size = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.SendChat.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.SendChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.SendChat)
  return false;
#undef DO_
}

void SendChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.SendChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // int32 did = 2;
  if (this->did() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->did(), output);
  }

  // int32 msg_type = 3;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->msg_type(), output);
  }

  // int32 msg_size = 4;
  if (this->msg_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_size(), output);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.SendChat.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.SendChat)
}

::google::protobuf::uint8* SendChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.SendChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // int32 did = 2;
  if (this->did() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->did(), target);
  }

  // int32 msg_type = 3;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->msg_type(), target);
  }

  // int32 msg_size = 4;
  if (this->msg_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_size(), target);
  }

  // string msg = 5;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.SendChat.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.SendChat)
  return target;
}

size_t SendChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.SendChat)
  size_t total_size = 0;

  // string msg = 5;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // int32 did = 2;
  if (this->did() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->did());
  }

  // int32 msg_type = 3;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // int32 msg_size = 4;
  if (this->msg_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.SendChat)
  GOOGLE_DCHECK_NE(&from, this);
  const SendChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const SendChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.SendChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.SendChat)
    MergeFrom(*source);
  }
}

void SendChat::MergeFrom(const SendChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.SendChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.did() != 0) {
    set_did(from.did());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.msg_size() != 0) {
    set_msg_size(from.msg_size());
  }
}

void SendChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.SendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendChat::CopyFrom(const SendChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.SendChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendChat::IsInitialized() const {
  return true;
}

void SendChat::Swap(SendChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SendChat::InternalSwap(SendChat* other) {
  msg_.Swap(&other->msg_);
  std::swap(rid_, other->rid_);
  std::swap(did_, other->did_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(msg_size_, other->msg_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata SendChat::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SendChat

// int32 rid = 1;
void SendChat::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 SendChat::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.SendChat.rid)
  return rid_;
}
void SendChat::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.SendChat.rid)
}

// int32 did = 2;
void SendChat::clear_did() {
  did_ = 0;
}
::google::protobuf::int32 SendChat::did() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.SendChat.did)
  return did_;
}
void SendChat::set_did(::google::protobuf::int32 value) {
  
  did_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.SendChat.did)
}

// int32 msg_type = 3;
void SendChat::clear_msg_type() {
  msg_type_ = 0;
}
::google::protobuf::int32 SendChat::msg_type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.SendChat.msg_type)
  return msg_type_;
}
void SendChat::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.SendChat.msg_type)
}

// int32 msg_size = 4;
void SendChat::clear_msg_size() {
  msg_size_ = 0;
}
::google::protobuf::int32 SendChat::msg_size() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.SendChat.msg_size)
  return msg_size_;
}
void SendChat::set_msg_size(::google::protobuf::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.SendChat.msg_size)
}

// string msg = 5;
void SendChat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SendChat::msg() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.SendChat.msg)
  return msg_.GetNoArena();
}
void SendChat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.SendChat.msg)
}
#if LANG_CXX11
void SendChat::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.SendChat.msg)
}
#endif
void SendChat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.SendChat.msg)
}
void SendChat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.SendChat.msg)
}
::std::string* SendChat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.SendChat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SendChat::release_msg() {
  // @@protoc_insertion_point(field_release:gameserver_proto.SendChat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SendChat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.SendChat.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RecvChat::kRidFieldNumber;
const int RecvChat::kSidFieldNumber;
const int RecvChat::kTypeFieldNumber;
const int RecvChat::kMsgTypeFieldNumber;
const int RecvChat::kTidFieldNumber;
const int RecvChat::kMsgSizeFieldNumber;
const int RecvChat::kSnameFieldNumber;
const int RecvChat::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RecvChat::RecvChat()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.RecvChat)
}
RecvChat::RecvChat(const RecvChat& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sname().size() > 0) {
    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.RecvChat)
}

void RecvChat::SharedCtor() {
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
  _cached_size_ = 0;
}

RecvChat::~RecvChat() {
  // @@protoc_insertion_point(destructor:gameserver_proto.RecvChat)
  SharedDtor();
}

void RecvChat::SharedDtor() {
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RecvChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RecvChat::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RecvChat& RecvChat::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

RecvChat* RecvChat::New(::google::protobuf::Arena* arena) const {
  RecvChat* n = new RecvChat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RecvChat::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.RecvChat)
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&msg_size_) -
    reinterpret_cast<char*>(&rid_) + sizeof(msg_size_));
}

bool RecvChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.RecvChat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 sid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sname = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.RecvChat.sname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.RecvChat.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.RecvChat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.RecvChat)
  return false;
#undef DO_
}

void RecvChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.RecvChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sid(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_type(), output);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msg_size(), output);
  }

  // string sname = 7;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.RecvChat.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sname(), output);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.RecvChat.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.RecvChat)
}

::google::protobuf::uint8* RecvChat::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.RecvChat)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sid(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_type(), target);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tid(), target);
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msg_size(), target);
  }

  // string sname = 7;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.RecvChat.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sname(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.RecvChat.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.RecvChat)
  return target;
}

size_t RecvChat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.RecvChat)
  size_t total_size = 0;

  // string sname = 7;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // int32 sid = 2;
  if (this->sid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RecvChat::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.RecvChat)
  GOOGLE_DCHECK_NE(&from, this);
  const RecvChat* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RecvChat>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.RecvChat)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.RecvChat)
    MergeFrom(*source);
  }
}

void RecvChat::MergeFrom(const RecvChat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.RecvChat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.sid() != 0) {
    set_sid(from.sid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
  if (from.msg_size() != 0) {
    set_msg_size(from.msg_size());
  }
}

void RecvChat::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.RecvChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RecvChat::CopyFrom(const RecvChat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.RecvChat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RecvChat::IsInitialized() const {
  return true;
}

void RecvChat::Swap(RecvChat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RecvChat::InternalSwap(RecvChat* other) {
  sname_.Swap(&other->sname_);
  msg_.Swap(&other->msg_);
  std::swap(rid_, other->rid_);
  std::swap(sid_, other->sid_);
  std::swap(type_, other->type_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(tid_, other->tid_);
  std::swap(msg_size_, other->msg_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RecvChat::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RecvChat

// int32 rid = 1;
void RecvChat::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 RecvChat::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.rid)
  return rid_;
}
void RecvChat::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.rid)
}

// int32 sid = 2;
void RecvChat::clear_sid() {
  sid_ = 0;
}
::google::protobuf::int32 RecvChat::sid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.sid)
  return sid_;
}
void RecvChat::set_sid(::google::protobuf::int32 value) {
  
  sid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.sid)
}

// int32 type = 3;
void RecvChat::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 RecvChat::type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.type)
  return type_;
}
void RecvChat::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.type)
}

// int32 msg_type = 4;
void RecvChat::clear_msg_type() {
  msg_type_ = 0;
}
::google::protobuf::int32 RecvChat::msg_type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.msg_type)
  return msg_type_;
}
void RecvChat::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.msg_type)
}

// int32 tid = 5;
void RecvChat::clear_tid() {
  tid_ = 0;
}
::google::protobuf::int32 RecvChat::tid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.tid)
  return tid_;
}
void RecvChat::set_tid(::google::protobuf::int32 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.tid)
}

// int32 msg_size = 6;
void RecvChat::clear_msg_size() {
  msg_size_ = 0;
}
::google::protobuf::int32 RecvChat::msg_size() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.msg_size)
  return msg_size_;
}
void RecvChat::set_msg_size(::google::protobuf::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.msg_size)
}

// string sname = 7;
void RecvChat::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecvChat::sname() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.sname)
  return sname_.GetNoArena();
}
void RecvChat::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.sname)
}
#if LANG_CXX11
void RecvChat::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.RecvChat.sname)
}
#endif
void RecvChat::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.RecvChat.sname)
}
void RecvChat::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.RecvChat.sname)
}
::std::string* RecvChat::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.RecvChat.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecvChat::release_sname() {
  // @@protoc_insertion_point(field_release:gameserver_proto.RecvChat.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecvChat::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.RecvChat.sname)
}

// string msg = 8;
void RecvChat::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RecvChat::msg() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RecvChat.msg)
  return msg_.GetNoArena();
}
void RecvChat::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.RecvChat.msg)
}
#if LANG_CXX11
void RecvChat::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.RecvChat.msg)
}
#endif
void RecvChat::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.RecvChat.msg)
}
void RecvChat::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.RecvChat.msg)
}
::std::string* RecvChat::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.RecvChat.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RecvChat::release_msg() {
  // @@protoc_insertion_point(field_release:gameserver_proto.RecvChat.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RecvChat::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.RecvChat.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgItem::kRidFieldNumber;
const int MsgItem::kSridFieldNumber;
const int MsgItem::kTypeFieldNumber;
const int MsgItem::kMsgTypeFieldNumber;
const int MsgItem::kTidFieldNumber;
const int MsgItem::kMsgSizeFieldNumber;
const int MsgItem::kStimeFieldNumber;
const int MsgItem::kSnameFieldNumber;
const int MsgItem::kMsgFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgItem::MsgItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.MsgItem)
}
MsgItem::MsgItem(const MsgItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sname().size() > 0) {
    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&rid_) + sizeof(stime_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.MsgItem)
}

void MsgItem::SharedCtor() {
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&rid_) + sizeof(stime_));
  _cached_size_ = 0;
}

MsgItem::~MsgItem() {
  // @@protoc_insertion_point(destructor:gameserver_proto.MsgItem)
  SharedDtor();
}

void MsgItem::SharedDtor() {
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MsgItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgItem::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const MsgItem& MsgItem::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

MsgItem* MsgItem::New(::google::protobuf::Arena* arena) const {
  MsgItem* n = new MsgItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.MsgItem)
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&rid_) + sizeof(stime_));
}

bool MsgItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.MsgItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 srid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sname = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.MsgItem.sname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.MsgItem.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.MsgItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.MsgItem)
  return false;
#undef DO_
}

void MsgItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.MsgItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // int32 srid = 2;
  if (this->srid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->srid(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_type(), output);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->msg_size(), output);
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stime(), output);
  }

  // string sname = 8;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.MsgItem.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sname(), output);
  }

  // string msg = 9;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.MsgItem.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->msg(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.MsgItem)
}

::google::protobuf::uint8* MsgItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.MsgItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // int32 srid = 2;
  if (this->srid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->srid(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_type(), target);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tid(), target);
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->msg_size(), target);
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stime(), target);
  }

  // string sname = 8;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.MsgItem.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sname(), target);
  }

  // string msg = 9;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.MsgItem.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->msg(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.MsgItem)
  return target;
}

size_t MsgItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.MsgItem)
  size_t total_size = 0;

  // string sname = 8;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // string msg = 9;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // int32 srid = 2;
  if (this->srid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srid());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  // int32 msg_size = 6;
  if (this->msg_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_size());
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.MsgItem)
  GOOGLE_DCHECK_NE(&from, this);
  const MsgItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.MsgItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.MsgItem)
    MergeFrom(*source);
  }
}

void MsgItem::MergeFrom(const MsgItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.MsgItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.srid() != 0) {
    set_srid(from.srid());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
  if (from.msg_size() != 0) {
    set_msg_size(from.msg_size());
  }
  if (from.stime() != 0) {
    set_stime(from.stime());
  }
}

void MsgItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.MsgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgItem::CopyFrom(const MsgItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.MsgItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgItem::IsInitialized() const {
  return true;
}

void MsgItem::Swap(MsgItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgItem::InternalSwap(MsgItem* other) {
  sname_.Swap(&other->sname_);
  msg_.Swap(&other->msg_);
  std::swap(rid_, other->rid_);
  std::swap(srid_, other->srid_);
  std::swap(type_, other->type_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(tid_, other->tid_);
  std::swap(msg_size_, other->msg_size_);
  std::swap(stime_, other->stime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgItem::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgItem

// int32 rid = 1;
void MsgItem::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 MsgItem::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.rid)
  return rid_;
}
void MsgItem::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.rid)
}

// int32 srid = 2;
void MsgItem::clear_srid() {
  srid_ = 0;
}
::google::protobuf::int32 MsgItem::srid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.srid)
  return srid_;
}
void MsgItem::set_srid(::google::protobuf::int32 value) {
  
  srid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.srid)
}

// int32 type = 3;
void MsgItem::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 MsgItem::type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.type)
  return type_;
}
void MsgItem::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.type)
}

// int32 msg_type = 4;
void MsgItem::clear_msg_type() {
  msg_type_ = 0;
}
::google::protobuf::int32 MsgItem::msg_type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.msg_type)
  return msg_type_;
}
void MsgItem::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.msg_type)
}

// int32 tid = 5;
void MsgItem::clear_tid() {
  tid_ = 0;
}
::google::protobuf::int32 MsgItem::tid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.tid)
  return tid_;
}
void MsgItem::set_tid(::google::protobuf::int32 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.tid)
}

// int32 msg_size = 6;
void MsgItem::clear_msg_size() {
  msg_size_ = 0;
}
::google::protobuf::int32 MsgItem::msg_size() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.msg_size)
  return msg_size_;
}
void MsgItem::set_msg_size(::google::protobuf::int32 value) {
  
  msg_size_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.msg_size)
}

// int32 stime = 7;
void MsgItem::clear_stime() {
  stime_ = 0;
}
::google::protobuf::int32 MsgItem::stime() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.stime)
  return stime_;
}
void MsgItem::set_stime(::google::protobuf::int32 value) {
  
  stime_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.stime)
}

// string sname = 8;
void MsgItem::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgItem::sname() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.sname)
  return sname_.GetNoArena();
}
void MsgItem::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.sname)
}
#if LANG_CXX11
void MsgItem::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.MsgItem.sname)
}
#endif
void MsgItem::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.MsgItem.sname)
}
void MsgItem::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.MsgItem.sname)
}
::std::string* MsgItem::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.MsgItem.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgItem::release_sname() {
  // @@protoc_insertion_point(field_release:gameserver_proto.MsgItem.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgItem::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.MsgItem.sname)
}

// string msg = 9;
void MsgItem::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MsgItem::msg() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.MsgItem.msg)
  return msg_.GetNoArena();
}
void MsgItem::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.MsgItem.msg)
}
#if LANG_CXX11
void MsgItem::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.MsgItem.msg)
}
#endif
void MsgItem::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.MsgItem.msg)
}
void MsgItem::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.MsgItem.msg)
}
::std::string* MsgItem::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.MsgItem.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MsgItem::release_msg() {
  // @@protoc_insertion_point(field_release:gameserver_proto.MsgItem.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MsgItem::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.MsgItem.msg)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FriendItem::kRidFieldNumber;
const int FriendItem::kStatusFieldNumber;
const int FriendItem::kTimelineFieldNumber;
const int FriendItem::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FriendItem::FriendItem()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.FriendItem)
}
FriendItem::FriendItem(const FriendItem& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  ::memcpy(&rid_, &from.rid_,
    reinterpret_cast<char*>(&timeline_) -
    reinterpret_cast<char*>(&rid_) + sizeof(timeline_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.FriendItem)
}

void FriendItem::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&timeline_) -
    reinterpret_cast<char*>(&rid_) + sizeof(timeline_));
  _cached_size_ = 0;
}

FriendItem::~FriendItem() {
  // @@protoc_insertion_point(destructor:gameserver_proto.FriendItem)
  SharedDtor();
}

void FriendItem::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FriendItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendItem::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const FriendItem& FriendItem::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

FriendItem* FriendItem::New(::google::protobuf::Arena* arena) const {
  FriendItem* n = new FriendItem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FriendItem::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.FriendItem)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&rid_, 0, reinterpret_cast<char*>(&timeline_) -
    reinterpret_cast<char*>(&rid_) + sizeof(timeline_));
}

bool FriendItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.FriendItem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 rid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 status = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 timeline = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeline_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string username = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "gameserver_proto.FriendItem.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.FriendItem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.FriendItem)
  return false;
#undef DO_
}

void FriendItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.FriendItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rid(), output);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // int32 timeline = 3;
  if (this->timeline() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->timeline(), output);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.FriendItem.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->username(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.FriendItem)
}

::google::protobuf::uint8* FriendItem::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.FriendItem)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 rid = 1;
  if (this->rid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rid(), target);
  }

  // int32 status = 2;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // int32 timeline = 3;
  if (this->timeline() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->timeline(), target);
  }

  // string username = 4;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "gameserver_proto.FriendItem.username");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->username(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.FriendItem)
  return target;
}

size_t FriendItem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.FriendItem)
  size_t total_size = 0;

  // string username = 4;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  // int32 rid = 1;
  if (this->rid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rid());
  }

  // int32 status = 2;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  // int32 timeline = 3;
  if (this->timeline() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timeline());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendItem::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.FriendItem)
  GOOGLE_DCHECK_NE(&from, this);
  const FriendItem* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const FriendItem>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.FriendItem)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.FriendItem)
    MergeFrom(*source);
  }
}

void FriendItem::MergeFrom(const FriendItem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.FriendItem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  if (from.rid() != 0) {
    set_rid(from.rid());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
  if (from.timeline() != 0) {
    set_timeline(from.timeline());
  }
}

void FriendItem::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.FriendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendItem::CopyFrom(const FriendItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.FriendItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendItem::IsInitialized() const {
  return true;
}

void FriendItem::Swap(FriendItem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FriendItem::InternalSwap(FriendItem* other) {
  username_.Swap(&other->username_);
  std::swap(rid_, other->rid_);
  std::swap(status_, other->status_);
  std::swap(timeline_, other->timeline_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata FriendItem::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FriendItem

// int32 rid = 1;
void FriendItem::clear_rid() {
  rid_ = 0;
}
::google::protobuf::int32 FriendItem::rid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.FriendItem.rid)
  return rid_;
}
void FriendItem::set_rid(::google::protobuf::int32 value) {
  
  rid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.FriendItem.rid)
}

// int32 status = 2;
void FriendItem::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 FriendItem::status() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.FriendItem.status)
  return status_;
}
void FriendItem::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.FriendItem.status)
}

// int32 timeline = 3;
void FriendItem::clear_timeline() {
  timeline_ = 0;
}
::google::protobuf::int32 FriendItem::timeline() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.FriendItem.timeline)
  return timeline_;
}
void FriendItem::set_timeline(::google::protobuf::int32 value) {
  
  timeline_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.FriendItem.timeline)
}

// string username = 4;
void FriendItem::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FriendItem::username() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.FriendItem.username)
  return username_.GetNoArena();
}
void FriendItem::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:gameserver_proto.FriendItem.username)
}
#if LANG_CXX11
void FriendItem::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:gameserver_proto.FriendItem.username)
}
#endif
void FriendItem::set_username(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:gameserver_proto.FriendItem.username)
}
void FriendItem::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:gameserver_proto.FriendItem.username)
}
::std::string* FriendItem::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:gameserver_proto.FriendItem.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FriendItem::release_username() {
  // @@protoc_insertion_point(field_release:gameserver_proto.FriendItem.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FriendItem::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.FriendItem.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestFrineds::kTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestFrineds::RequestFrineds()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.RequestFrineds)
}
RequestFrineds::RequestFrineds(const RequestFrineds& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.RequestFrineds)
}

void RequestFrineds::SharedCtor() {
  type_ = 0;
  _cached_size_ = 0;
}

RequestFrineds::~RequestFrineds() {
  // @@protoc_insertion_point(destructor:gameserver_proto.RequestFrineds)
  SharedDtor();
}

void RequestFrineds::SharedDtor() {
}

void RequestFrineds::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestFrineds::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestFrineds& RequestFrineds::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestFrineds* RequestFrineds::New(::google::protobuf::Arena* arena) const {
  RequestFrineds* n = new RequestFrineds;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestFrineds::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.RequestFrineds)
  type_ = 0;
}

bool RequestFrineds::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.RequestFrineds)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.RequestFrineds)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.RequestFrineds)
  return false;
#undef DO_
}

void RequestFrineds::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.RequestFrineds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.RequestFrineds)
}

::google::protobuf::uint8* RequestFrineds::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.RequestFrineds)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.RequestFrineds)
  return target;
}

size_t RequestFrineds::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.RequestFrineds)
  size_t total_size = 0;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestFrineds::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.RequestFrineds)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestFrineds* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestFrineds>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.RequestFrineds)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.RequestFrineds)
    MergeFrom(*source);
  }
}

void RequestFrineds::MergeFrom(const RequestFrineds& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.RequestFrineds)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
}

void RequestFrineds::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.RequestFrineds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestFrineds::CopyFrom(const RequestFrineds& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.RequestFrineds)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestFrineds::IsInitialized() const {
  return true;
}

void RequestFrineds::Swap(RequestFrineds* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestFrineds::InternalSwap(RequestFrineds* other) {
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestFrineds::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestFrineds

// int32 type = 1;
void RequestFrineds::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 RequestFrineds::type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestFrineds.type)
  return type_;
}
void RequestFrineds::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestFrineds.type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseFriends::kFriendsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseFriends::ResponseFriends()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.ResponseFriends)
}
ResponseFriends::ResponseFriends(const ResponseFriends& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      friends_(from.friends_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.ResponseFriends)
}

void ResponseFriends::SharedCtor() {
  _cached_size_ = 0;
}

ResponseFriends::~ResponseFriends() {
  // @@protoc_insertion_point(destructor:gameserver_proto.ResponseFriends)
  SharedDtor();
}

void ResponseFriends::SharedDtor() {
}

void ResponseFriends::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseFriends::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseFriends& ResponseFriends::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseFriends* ResponseFriends::New(::google::protobuf::Arena* arena) const {
  ResponseFriends* n = new ResponseFriends;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseFriends::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.ResponseFriends)
  friends_.Clear();
}

bool ResponseFriends::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.ResponseFriends)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gameserver_proto.FriendItem friends = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.ResponseFriends)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.ResponseFriends)
  return false;
#undef DO_
}

void ResponseFriends::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.ResponseFriends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gameserver_proto.FriendItem friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.ResponseFriends)
}

::google::protobuf::uint8* ResponseFriends::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.ResponseFriends)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .gameserver_proto.FriendItem friends = 1;
  for (unsigned int i = 0, n = this->friends_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, this->friends(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.ResponseFriends)
  return target;
}

size_t ResponseFriends::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.ResponseFriends)
  size_t total_size = 0;

  // repeated .gameserver_proto.FriendItem friends = 1;
  {
    unsigned int count = this->friends_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friends(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseFriends::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.ResponseFriends)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseFriends* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseFriends>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.ResponseFriends)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.ResponseFriends)
    MergeFrom(*source);
  }
}

void ResponseFriends::MergeFrom(const ResponseFriends& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.ResponseFriends)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  friends_.MergeFrom(from.friends_);
}

void ResponseFriends::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.ResponseFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseFriends::CopyFrom(const ResponseFriends& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.ResponseFriends)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseFriends::IsInitialized() const {
  return true;
}

void ResponseFriends::Swap(ResponseFriends* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseFriends::InternalSwap(ResponseFriends* other) {
  friends_.InternalSwap(&other->friends_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseFriends::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseFriends

// repeated .gameserver_proto.FriendItem friends = 1;
int ResponseFriends::friends_size() const {
  return friends_.size();
}
void ResponseFriends::clear_friends() {
  friends_.Clear();
}
const ::gameserver_proto::FriendItem& ResponseFriends::friends(int index) const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseFriends.friends)
  return friends_.Get(index);
}
::gameserver_proto::FriendItem* ResponseFriends::mutable_friends(int index) {
  // @@protoc_insertion_point(field_mutable:gameserver_proto.ResponseFriends.friends)
  return friends_.Mutable(index);
}
::gameserver_proto::FriendItem* ResponseFriends::add_friends() {
  // @@protoc_insertion_point(field_add:gameserver_proto.ResponseFriends.friends)
  return friends_.Add();
}
::google::protobuf::RepeatedPtrField< ::gameserver_proto::FriendItem >*
ResponseFriends::mutable_friends() {
  // @@protoc_insertion_point(field_mutable_list:gameserver_proto.ResponseFriends.friends)
  return &friends_;
}
const ::google::protobuf::RepeatedPtrField< ::gameserver_proto::FriendItem >&
ResponseFriends::friends() const {
  // @@protoc_insertion_point(field_list:gameserver_proto.ResponseFriends.friends)
  return friends_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestAddFriend::kAridFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestAddFriend::RequestAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.RequestAddFriend)
}
RequestAddFriend::RequestAddFriend(const RequestAddFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  arid_ = from.arid_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.RequestAddFriend)
}

void RequestAddFriend::SharedCtor() {
  arid_ = 0;
  _cached_size_ = 0;
}

RequestAddFriend::~RequestAddFriend() {
  // @@protoc_insertion_point(destructor:gameserver_proto.RequestAddFriend)
  SharedDtor();
}

void RequestAddFriend::SharedDtor() {
}

void RequestAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAddFriend::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestAddFriend& RequestAddFriend::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestAddFriend* RequestAddFriend::New(::google::protobuf::Arena* arena) const {
  RequestAddFriend* n = new RequestAddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.RequestAddFriend)
  arid_ = 0;
}

bool RequestAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.RequestAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 arid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &arid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.RequestAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.RequestAddFriend)
  return false;
#undef DO_
}

void RequestAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.RequestAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arid = 1;
  if (this->arid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->arid(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.RequestAddFriend)
}

::google::protobuf::uint8* RequestAddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.RequestAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 arid = 1;
  if (this->arid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->arid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.RequestAddFriend)
  return target;
}

size_t RequestAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.RequestAddFriend)
  size_t total_size = 0;

  // int32 arid = 1;
  if (this->arid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->arid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.RequestAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestAddFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestAddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.RequestAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.RequestAddFriend)
    MergeFrom(*source);
  }
}

void RequestAddFriend::MergeFrom(const RequestAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.RequestAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.arid() != 0) {
    set_arid(from.arid());
  }
}

void RequestAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.RequestAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAddFriend::CopyFrom(const RequestAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.RequestAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAddFriend::IsInitialized() const {
  return true;
}

void RequestAddFriend::Swap(RequestAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestAddFriend::InternalSwap(RequestAddFriend* other) {
  std::swap(arid_, other->arid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestAddFriend::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestAddFriend

// int32 arid = 1;
void RequestAddFriend::clear_arid() {
  arid_ = 0;
}
::google::protobuf::int32 RequestAddFriend::arid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestAddFriend.arid)
  return arid_;
}
void RequestAddFriend::set_arid(::google::protobuf::int32 value) {
  
  arid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestAddFriend.arid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseAddFriend::kStatusFieldNumber;
const int ResponseAddFriend::kFriendFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseAddFriend::ResponseAddFriend()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.ResponseAddFriend)
}
ResponseAddFriend::ResponseAddFriend(const ResponseAddFriend& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_friend_()) {
    friend__ = new ::gameserver_proto::FriendItem(*from.friend__);
  } else {
    friend__ = NULL;
  }
  status_ = from.status_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.ResponseAddFriend)
}

void ResponseAddFriend::SharedCtor() {
  ::memset(&friend__, 0, reinterpret_cast<char*>(&status_) -
    reinterpret_cast<char*>(&friend__) + sizeof(status_));
  _cached_size_ = 0;
}

ResponseAddFriend::~ResponseAddFriend() {
  // @@protoc_insertion_point(destructor:gameserver_proto.ResponseAddFriend)
  SharedDtor();
}

void ResponseAddFriend::SharedDtor() {
  if (this != internal_default_instance()) {
    delete friend__;
  }
}

void ResponseAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseAddFriend::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseAddFriend& ResponseAddFriend::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseAddFriend* ResponseAddFriend::New(::google::protobuf::Arena* arena) const {
  ResponseAddFriend* n = new ResponseAddFriend;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseAddFriend::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.ResponseAddFriend)
  if (GetArenaNoVirtual() == NULL && friend__ != NULL) {
    delete friend__;
  }
  friend__ = NULL;
  status_ = 0;
}

bool ResponseAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.ResponseAddFriend)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 status = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .gameserver_proto.FriendItem friend = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.ResponseAddFriend)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.ResponseAddFriend)
  return false;
#undef DO_
}

void ResponseAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.ResponseAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // .gameserver_proto.FriendItem friend = 2;
  if (this->has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->friend__, output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.ResponseAddFriend)
}

::google::protobuf::uint8* ResponseAddFriend::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.ResponseAddFriend)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 status = 1;
  if (this->status() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // .gameserver_proto.FriendItem friend = 2;
  if (this->has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->friend__, deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.ResponseAddFriend)
  return target;
}

size_t ResponseAddFriend::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.ResponseAddFriend)
  size_t total_size = 0;

  // .gameserver_proto.FriendItem friend = 2;
  if (this->has_friend_()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->friend__);
  }

  // int32 status = 1;
  if (this->status() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->status());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.ResponseAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseAddFriend* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseAddFriend>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.ResponseAddFriend)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.ResponseAddFriend)
    MergeFrom(*source);
  }
}

void ResponseAddFriend::MergeFrom(const ResponseAddFriend& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.ResponseAddFriend)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_friend_()) {
    mutable_friend_()->::gameserver_proto::FriendItem::MergeFrom(from.friend_());
  }
  if (from.status() != 0) {
    set_status(from.status());
  }
}

void ResponseAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.ResponseAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseAddFriend::CopyFrom(const ResponseAddFriend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.ResponseAddFriend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseAddFriend::IsInitialized() const {
  return true;
}

void ResponseAddFriend::Swap(ResponseAddFriend* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseAddFriend::InternalSwap(ResponseAddFriend* other) {
  std::swap(friend__, other->friend__);
  std::swap(status_, other->status_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseAddFriend::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseAddFriend

// int32 status = 1;
void ResponseAddFriend::clear_status() {
  status_ = 0;
}
::google::protobuf::int32 ResponseAddFriend::status() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseAddFriend.status)
  return status_;
}
void ResponseAddFriend::set_status(::google::protobuf::int32 value) {
  
  status_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.ResponseAddFriend.status)
}

// .gameserver_proto.FriendItem friend = 2;
bool ResponseAddFriend::has_friend_() const {
  return this != internal_default_instance() && friend__ != NULL;
}
void ResponseAddFriend::clear_friend_() {
  if (GetArenaNoVirtual() == NULL && friend__ != NULL) delete friend__;
  friend__ = NULL;
}
const ::gameserver_proto::FriendItem& ResponseAddFriend::friend_() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseAddFriend.friend)
  return friend__ != NULL ? *friend__
                         : *::gameserver_proto::FriendItem::internal_default_instance();
}
::gameserver_proto::FriendItem* ResponseAddFriend::mutable_friend_() {
  
  if (friend__ == NULL) {
    friend__ = new ::gameserver_proto::FriendItem;
  }
  // @@protoc_insertion_point(field_mutable:gameserver_proto.ResponseAddFriend.friend)
  return friend__;
}
::gameserver_proto::FriendItem* ResponseAddFriend::release_friend_() {
  // @@protoc_insertion_point(field_release:gameserver_proto.ResponseAddFriend.friend)
  
  ::gameserver_proto::FriendItem* temp = friend__;
  friend__ = NULL;
  return temp;
}
void ResponseAddFriend::set_allocated_friend_(::gameserver_proto::FriendItem* friend_) {
  delete friend__;
  friend__ = friend_;
  if (friend_) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:gameserver_proto.ResponseAddFriend.friend)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RequestOfflineMsgs::kTypeFieldNumber;
const int RequestOfflineMsgs::kRridFieldNumber;
const int RequestOfflineMsgs::kCountFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RequestOfflineMsgs::RequestOfflineMsgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.RequestOfflineMsgs)
}
RequestOfflineMsgs::RequestOfflineMsgs(const RequestOfflineMsgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.RequestOfflineMsgs)
}

void RequestOfflineMsgs::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
  _cached_size_ = 0;
}

RequestOfflineMsgs::~RequestOfflineMsgs() {
  // @@protoc_insertion_point(destructor:gameserver_proto.RequestOfflineMsgs)
  SharedDtor();
}

void RequestOfflineMsgs::SharedDtor() {
}

void RequestOfflineMsgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestOfflineMsgs::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const RequestOfflineMsgs& RequestOfflineMsgs::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

RequestOfflineMsgs* RequestOfflineMsgs::New(::google::protobuf::Arena* arena) const {
  RequestOfflineMsgs* n = new RequestOfflineMsgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RequestOfflineMsgs::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.RequestOfflineMsgs)
  ::memset(&type_, 0, reinterpret_cast<char*>(&count_) -
    reinterpret_cast<char*>(&type_) + sizeof(count_));
}

bool RequestOfflineMsgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.RequestOfflineMsgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 rrid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.RequestOfflineMsgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.RequestOfflineMsgs)
  return false;
#undef DO_
}

void RequestOfflineMsgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.RequestOfflineMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // int32 rrid = 2;
  if (this->rrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->rrid(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.RequestOfflineMsgs)
}

::google::protobuf::uint8* RequestOfflineMsgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.RequestOfflineMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 type = 1;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // int32 rrid = 2;
  if (this->rrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->rrid(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.RequestOfflineMsgs)
  return target;
}

size_t RequestOfflineMsgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.RequestOfflineMsgs)
  size_t total_size = 0;

  // int32 type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 rrid = 2;
  if (this->rrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->rrid());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestOfflineMsgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.RequestOfflineMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  const RequestOfflineMsgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const RequestOfflineMsgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.RequestOfflineMsgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.RequestOfflineMsgs)
    MergeFrom(*source);
  }
}

void RequestOfflineMsgs::MergeFrom(const RequestOfflineMsgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.RequestOfflineMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.rrid() != 0) {
    set_rrid(from.rrid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void RequestOfflineMsgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.RequestOfflineMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestOfflineMsgs::CopyFrom(const RequestOfflineMsgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.RequestOfflineMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestOfflineMsgs::IsInitialized() const {
  return true;
}

void RequestOfflineMsgs::Swap(RequestOfflineMsgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RequestOfflineMsgs::InternalSwap(RequestOfflineMsgs* other) {
  std::swap(type_, other->type_);
  std::swap(rrid_, other->rrid_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata RequestOfflineMsgs::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RequestOfflineMsgs

// int32 type = 1;
void RequestOfflineMsgs::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 RequestOfflineMsgs::type() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestOfflineMsgs.type)
  return type_;
}
void RequestOfflineMsgs::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestOfflineMsgs.type)
}

// int32 rrid = 2;
void RequestOfflineMsgs::clear_rrid() {
  rrid_ = 0;
}
::google::protobuf::int32 RequestOfflineMsgs::rrid() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestOfflineMsgs.rrid)
  return rrid_;
}
void RequestOfflineMsgs::set_rrid(::google::protobuf::int32 value) {
  
  rrid_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestOfflineMsgs.rrid)
}

// int32 count = 3;
void RequestOfflineMsgs::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 RequestOfflineMsgs::count() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.RequestOfflineMsgs.count)
  return count_;
}
void RequestOfflineMsgs::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.RequestOfflineMsgs.count)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResponseOfflineMsgs::kCountFieldNumber;
const int ResponseOfflineMsgs::kMsgsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResponseOfflineMsgs::ResponseOfflineMsgs()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:gameserver_proto.ResponseOfflineMsgs)
}
ResponseOfflineMsgs::ResponseOfflineMsgs(const ResponseOfflineMsgs& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      msgs_(from.msgs_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  count_ = from.count_;
  // @@protoc_insertion_point(copy_constructor:gameserver_proto.ResponseOfflineMsgs)
}

void ResponseOfflineMsgs::SharedCtor() {
  count_ = 0;
  _cached_size_ = 0;
}

ResponseOfflineMsgs::~ResponseOfflineMsgs() {
  // @@protoc_insertion_point(destructor:gameserver_proto.ResponseOfflineMsgs)
  SharedDtor();
}

void ResponseOfflineMsgs::SharedDtor() {
}

void ResponseOfflineMsgs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResponseOfflineMsgs::descriptor() {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const ResponseOfflineMsgs& ResponseOfflineMsgs::default_instance() {
  protobuf_gameserver_5fmsgheader_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResponseOfflineMsgs* ResponseOfflineMsgs::New(::google::protobuf::Arena* arena) const {
  ResponseOfflineMsgs* n = new ResponseOfflineMsgs;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResponseOfflineMsgs::Clear() {
// @@protoc_insertion_point(message_clear_start:gameserver_proto.ResponseOfflineMsgs)
  msgs_.Clear();
  count_ = 0;
}

bool ResponseOfflineMsgs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gameserver_proto.ResponseOfflineMsgs)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 count = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .gameserver_proto.MsgItem msgs = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_msgs()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gameserver_proto.ResponseOfflineMsgs)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gameserver_proto.ResponseOfflineMsgs)
  return false;
#undef DO_
}

void ResponseOfflineMsgs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gameserver_proto.ResponseOfflineMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // repeated .gameserver_proto.MsgItem msgs = 2;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->msgs(i), output);
  }

  // @@protoc_insertion_point(serialize_end:gameserver_proto.ResponseOfflineMsgs)
}

::google::protobuf::uint8* ResponseOfflineMsgs::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gameserver_proto.ResponseOfflineMsgs)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 count = 1;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // repeated .gameserver_proto.MsgItem msgs = 2;
  for (unsigned int i = 0, n = this->msgs_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, this->msgs(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:gameserver_proto.ResponseOfflineMsgs)
  return target;
}

size_t ResponseOfflineMsgs::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:gameserver_proto.ResponseOfflineMsgs)
  size_t total_size = 0;

  // repeated .gameserver_proto.MsgItem msgs = 2;
  {
    unsigned int count = this->msgs_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msgs(i));
    }
  }

  // int32 count = 1;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResponseOfflineMsgs::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:gameserver_proto.ResponseOfflineMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  const ResponseOfflineMsgs* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const ResponseOfflineMsgs>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:gameserver_proto.ResponseOfflineMsgs)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:gameserver_proto.ResponseOfflineMsgs)
    MergeFrom(*source);
  }
}

void ResponseOfflineMsgs::MergeFrom(const ResponseOfflineMsgs& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:gameserver_proto.ResponseOfflineMsgs)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  msgs_.MergeFrom(from.msgs_);
  if (from.count() != 0) {
    set_count(from.count());
  }
}

void ResponseOfflineMsgs::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:gameserver_proto.ResponseOfflineMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResponseOfflineMsgs::CopyFrom(const ResponseOfflineMsgs& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:gameserver_proto.ResponseOfflineMsgs)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResponseOfflineMsgs::IsInitialized() const {
  return true;
}

void ResponseOfflineMsgs::Swap(ResponseOfflineMsgs* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResponseOfflineMsgs::InternalSwap(ResponseOfflineMsgs* other) {
  msgs_.InternalSwap(&other->msgs_);
  std::swap(count_, other->count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata ResponseOfflineMsgs::GetMetadata() const {
  protobuf_gameserver_5fmsgheader_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_gameserver_5fmsgheader_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResponseOfflineMsgs

// int32 count = 1;
void ResponseOfflineMsgs::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 ResponseOfflineMsgs::count() const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseOfflineMsgs.count)
  return count_;
}
void ResponseOfflineMsgs::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:gameserver_proto.ResponseOfflineMsgs.count)
}

// repeated .gameserver_proto.MsgItem msgs = 2;
int ResponseOfflineMsgs::msgs_size() const {
  return msgs_.size();
}
void ResponseOfflineMsgs::clear_msgs() {
  msgs_.Clear();
}
const ::gameserver_proto::MsgItem& ResponseOfflineMsgs::msgs(int index) const {
  // @@protoc_insertion_point(field_get:gameserver_proto.ResponseOfflineMsgs.msgs)
  return msgs_.Get(index);
}
::gameserver_proto::MsgItem* ResponseOfflineMsgs::mutable_msgs(int index) {
  // @@protoc_insertion_point(field_mutable:gameserver_proto.ResponseOfflineMsgs.msgs)
  return msgs_.Mutable(index);
}
::gameserver_proto::MsgItem* ResponseOfflineMsgs::add_msgs() {
  // @@protoc_insertion_point(field_add:gameserver_proto.ResponseOfflineMsgs.msgs)
  return msgs_.Add();
}
::google::protobuf::RepeatedPtrField< ::gameserver_proto::MsgItem >*
ResponseOfflineMsgs::mutable_msgs() {
  // @@protoc_insertion_point(field_mutable_list:gameserver_proto.ResponseOfflineMsgs.msgs)
  return &msgs_;
}
const ::google::protobuf::RepeatedPtrField< ::gameserver_proto::MsgItem >&
ResponseOfflineMsgs::msgs() const {
  // @@protoc_insertion_point(field_list:gameserver_proto.ResponseOfflineMsgs.msgs)
  return msgs_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace gameserver_proto

// @@protoc_insertion_point(global_scope)
