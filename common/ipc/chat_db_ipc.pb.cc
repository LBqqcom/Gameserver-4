// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: chat_db_ipc.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "chat_db_ipc.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace inner_ipc {
class OfflineMsgIPCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OfflineMsgIPC> {
} _OfflineMsgIPC_default_instance_;
class EmailBodyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmailBody> {
} _EmailBody_default_instance_;
class EmailMsgIPCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<EmailMsgIPC> {
} _EmailMsgIPC_default_instance_;
class OfflineGoodsIPCDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OfflineGoodsIPC> {
} _OfflineGoodsIPC_default_instance_;

namespace protobuf_chat_5fdb_5fipc_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[4];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] = {
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
  { NULL, NULL, 0, -1, -1, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, srid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, did_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, msg_type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, tid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, size_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, stime_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, msg_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineMsgIPC, sname_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBody, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBody, emailtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailBody, emailbody_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, sendrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, recvrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, emailtype_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, emailhead_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EmailMsgIPC, emailbody_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGoodsIPC, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGoodsIPC, sendrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGoodsIPC, recvrid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGoodsIPC, count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OfflineGoodsIPC, goodsid_),
};

static const ::google::protobuf::internal::MigrationSchema schemas[] = {
  { 0, -1, sizeof(OfflineMsgIPC)},
  { 14, -1, sizeof(EmailBody)},
  { 21, -1, sizeof(EmailMsgIPC)},
  { 31, -1, sizeof(OfflineGoodsIPC)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_OfflineMsgIPC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmailBody_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_EmailMsgIPC_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_OfflineGoodsIPC_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "chat_db_ipc.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 4);
}

}  // namespace

void TableStruct::Shutdown() {
  _OfflineMsgIPC_default_instance_.Shutdown();
  delete file_level_metadata[0].reflection;
  _EmailBody_default_instance_.Shutdown();
  delete file_level_metadata[1].reflection;
  _EmailMsgIPC_default_instance_.Shutdown();
  delete file_level_metadata[2].reflection;
  _OfflineGoodsIPC_default_instance_.Shutdown();
  delete file_level_metadata[3].reflection;
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _OfflineMsgIPC_default_instance_.DefaultConstruct();
  _EmailBody_default_instance_.DefaultConstruct();
  _EmailMsgIPC_default_instance_.DefaultConstruct();
  _OfflineGoodsIPC_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] = {
      "\n\021chat_db_ipc.proto\022\tinner_ipc\"\220\001\n\rOffli"
      "neMsgIPC\022\014\n\004srid\030\001 \001(\005\022\013\n\003did\030\002 \001(\005\022\014\n\004t"
      "ype\030\003 \001(\005\022\020\n\010msg_type\030\004 \001(\005\022\013\n\003tid\030\005 \001(\005"
      "\022\014\n\004size\030\006 \001(\005\022\r\n\005stime\030\007 \001(\005\022\013\n\003msg\030\010 \001"
      "(\t\022\r\n\005sname\030\t \001(\t\"1\n\tEmailBody\022\021\n\temailT"
      "ype\030\001 \001(\005\022\021\n\temailBody\030\002 \001(\t\"~\n\013EmailMsg"
      "IPC\022\017\n\007sendRid\030\001 \001(\005\022\017\n\007recvRid\030\002 \001(\005\022\021\n"
      "\temailType\030\003 \001(\005\022\021\n\temailHead\030\004 \001(\t\022\'\n\te"
      "mailBody\030\005 \003(\0132\024.inner_ipc.EmailBody\"S\n\017"
      "OfflineGoodsIPC\022\017\n\007sendRid\030\001 \001(\005\022\017\n\007recv"
      "Rid\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\017\n\007goodsId\030\004 \001("
      "\005b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 449);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "chat_db_ipc.proto", &protobuf_RegisterTypes);
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_chat_5fdb_5fipc_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineMsgIPC::kSridFieldNumber;
const int OfflineMsgIPC::kDidFieldNumber;
const int OfflineMsgIPC::kTypeFieldNumber;
const int OfflineMsgIPC::kMsgTypeFieldNumber;
const int OfflineMsgIPC::kTidFieldNumber;
const int OfflineMsgIPC::kSizeFieldNumber;
const int OfflineMsgIPC::kStimeFieldNumber;
const int OfflineMsgIPC::kMsgFieldNumber;
const int OfflineMsgIPC::kSnameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineMsgIPC::OfflineMsgIPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inner_ipc.OfflineMsgIPC)
}
OfflineMsgIPC::OfflineMsgIPC(const OfflineMsgIPC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.msg().size() > 0) {
    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.sname().size() > 0) {
    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  ::memcpy(&srid_, &from.srid_,
    reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&srid_) + sizeof(stime_));
  // @@protoc_insertion_point(copy_constructor:inner_ipc.OfflineMsgIPC)
}

void OfflineMsgIPC::SharedCtor() {
  msg_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&srid_, 0, reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&srid_) + sizeof(stime_));
  _cached_size_ = 0;
}

OfflineMsgIPC::~OfflineMsgIPC() {
  // @@protoc_insertion_point(destructor:inner_ipc.OfflineMsgIPC)
  SharedDtor();
}

void OfflineMsgIPC::SharedDtor() {
  msg_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OfflineMsgIPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineMsgIPC::descriptor() {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OfflineMsgIPC& OfflineMsgIPC::default_instance() {
  protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfflineMsgIPC* OfflineMsgIPC::New(::google::protobuf::Arena* arena) const {
  OfflineMsgIPC* n = new OfflineMsgIPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineMsgIPC::Clear() {
// @@protoc_insertion_point(message_clear_start:inner_ipc.OfflineMsgIPC)
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&srid_, 0, reinterpret_cast<char*>(&stime_) -
    reinterpret_cast<char*>(&srid_) + sizeof(stime_));
}

bool OfflineMsgIPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inner_ipc.OfflineMsgIPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 srid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 did = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &did_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 msg_type = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &msg_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 tid = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 size = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 stime = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string msg = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "inner_ipc.OfflineMsgIPC.msg"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string sname = 9;
      case 9: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(74u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sname()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->sname().data(), this->sname().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "inner_ipc.OfflineMsgIPC.sname"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inner_ipc.OfflineMsgIPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inner_ipc.OfflineMsgIPC)
  return false;
#undef DO_
}

void OfflineMsgIPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inner_ipc.OfflineMsgIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 srid = 1;
  if (this->srid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->srid(), output);
  }

  // int32 did = 2;
  if (this->did() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->did(), output);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->msg_type(), output);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tid(), output);
  }

  // int32 size = 6;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->size(), output);
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->stime(), output);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.OfflineMsgIPC.msg");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->msg(), output);
  }

  // string sname = 9;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.OfflineMsgIPC.sname");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      9, this->sname(), output);
  }

  // @@protoc_insertion_point(serialize_end:inner_ipc.OfflineMsgIPC)
}

::google::protobuf::uint8* OfflineMsgIPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner_ipc.OfflineMsgIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 srid = 1;
  if (this->srid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->srid(), target);
  }

  // int32 did = 2;
  if (this->did() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->did(), target);
  }

  // int32 type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->msg_type(), target);
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tid(), target);
  }

  // int32 size = 6;
  if (this->size() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->size(), target);
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->stime(), target);
  }

  // string msg = 8;
  if (this->msg().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.OfflineMsgIPC.msg");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->msg(), target);
  }

  // string sname = 9;
  if (this->sname().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->sname().data(), this->sname().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.OfflineMsgIPC.sname");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->sname(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:inner_ipc.OfflineMsgIPC)
  return target;
}

size_t OfflineMsgIPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner_ipc.OfflineMsgIPC)
  size_t total_size = 0;

  // string msg = 8;
  if (this->msg().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->msg());
  }

  // string sname = 9;
  if (this->sname().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->sname());
  }

  // int32 srid = 1;
  if (this->srid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->srid());
  }

  // int32 did = 2;
  if (this->did() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->did());
  }

  // int32 type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->type());
  }

  // int32 msg_type = 4;
  if (this->msg_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->msg_type());
  }

  // int32 tid = 5;
  if (this->tid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->tid());
  }

  // int32 size = 6;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->size());
  }

  // int32 stime = 7;
  if (this->stime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->stime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineMsgIPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inner_ipc.OfflineMsgIPC)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineMsgIPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OfflineMsgIPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inner_ipc.OfflineMsgIPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inner_ipc.OfflineMsgIPC)
    MergeFrom(*source);
  }
}

void OfflineMsgIPC::MergeFrom(const OfflineMsgIPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner_ipc.OfflineMsgIPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.msg().size() > 0) {

    msg_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.msg_);
  }
  if (from.sname().size() > 0) {

    sname_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.sname_);
  }
  if (from.srid() != 0) {
    set_srid(from.srid());
  }
  if (from.did() != 0) {
    set_did(from.did());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.msg_type() != 0) {
    set_msg_type(from.msg_type());
  }
  if (from.tid() != 0) {
    set_tid(from.tid());
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.stime() != 0) {
    set_stime(from.stime());
  }
}

void OfflineMsgIPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inner_ipc.OfflineMsgIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineMsgIPC::CopyFrom(const OfflineMsgIPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner_ipc.OfflineMsgIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineMsgIPC::IsInitialized() const {
  return true;
}

void OfflineMsgIPC::Swap(OfflineMsgIPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineMsgIPC::InternalSwap(OfflineMsgIPC* other) {
  msg_.Swap(&other->msg_);
  sname_.Swap(&other->sname_);
  std::swap(srid_, other->srid_);
  std::swap(did_, other->did_);
  std::swap(type_, other->type_);
  std::swap(msg_type_, other->msg_type_);
  std::swap(tid_, other->tid_);
  std::swap(size_, other->size_);
  std::swap(stime_, other->stime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfflineMsgIPC::GetMetadata() const {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineMsgIPC

// int32 srid = 1;
void OfflineMsgIPC::clear_srid() {
  srid_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::srid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.srid)
  return srid_;
}
void OfflineMsgIPC::set_srid(::google::protobuf::int32 value) {
  
  srid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.srid)
}

// int32 did = 2;
void OfflineMsgIPC::clear_did() {
  did_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::did() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.did)
  return did_;
}
void OfflineMsgIPC::set_did(::google::protobuf::int32 value) {
  
  did_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.did)
}

// int32 type = 3;
void OfflineMsgIPC::clear_type() {
  type_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::type() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.type)
  return type_;
}
void OfflineMsgIPC::set_type(::google::protobuf::int32 value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.type)
}

// int32 msg_type = 4;
void OfflineMsgIPC::clear_msg_type() {
  msg_type_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::msg_type() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.msg_type)
  return msg_type_;
}
void OfflineMsgIPC::set_msg_type(::google::protobuf::int32 value) {
  
  msg_type_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.msg_type)
}

// int32 tid = 5;
void OfflineMsgIPC::clear_tid() {
  tid_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::tid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.tid)
  return tid_;
}
void OfflineMsgIPC::set_tid(::google::protobuf::int32 value) {
  
  tid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.tid)
}

// int32 size = 6;
void OfflineMsgIPC::clear_size() {
  size_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::size() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.size)
  return size_;
}
void OfflineMsgIPC::set_size(::google::protobuf::int32 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.size)
}

// int32 stime = 7;
void OfflineMsgIPC::clear_stime() {
  stime_ = 0;
}
::google::protobuf::int32 OfflineMsgIPC::stime() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.stime)
  return stime_;
}
void OfflineMsgIPC::set_stime(::google::protobuf::int32 value) {
  
  stime_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.stime)
}

// string msg = 8;
void OfflineMsgIPC::clear_msg() {
  msg_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OfflineMsgIPC::msg() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.msg)
  return msg_.GetNoArena();
}
void OfflineMsgIPC::set_msg(const ::std::string& value) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.msg)
}
#if LANG_CXX11
void OfflineMsgIPC::set_msg(::std::string&& value) {
  
  msg_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inner_ipc.OfflineMsgIPC.msg)
}
#endif
void OfflineMsgIPC::set_msg(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inner_ipc.OfflineMsgIPC.msg)
}
void OfflineMsgIPC::set_msg(const char* value, size_t size) {
  
  msg_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inner_ipc.OfflineMsgIPC.msg)
}
::std::string* OfflineMsgIPC::mutable_msg() {
  
  // @@protoc_insertion_point(field_mutable:inner_ipc.OfflineMsgIPC.msg)
  return msg_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OfflineMsgIPC::release_msg() {
  // @@protoc_insertion_point(field_release:inner_ipc.OfflineMsgIPC.msg)
  
  return msg_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OfflineMsgIPC::set_allocated_msg(::std::string* msg) {
  if (msg != NULL) {
    
  } else {
    
  }
  msg_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), msg);
  // @@protoc_insertion_point(field_set_allocated:inner_ipc.OfflineMsgIPC.msg)
}

// string sname = 9;
void OfflineMsgIPC::clear_sname() {
  sname_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OfflineMsgIPC::sname() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineMsgIPC.sname)
  return sname_.GetNoArena();
}
void OfflineMsgIPC::set_sname(const ::std::string& value) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineMsgIPC.sname)
}
#if LANG_CXX11
void OfflineMsgIPC::set_sname(::std::string&& value) {
  
  sname_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inner_ipc.OfflineMsgIPC.sname)
}
#endif
void OfflineMsgIPC::set_sname(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inner_ipc.OfflineMsgIPC.sname)
}
void OfflineMsgIPC::set_sname(const char* value, size_t size) {
  
  sname_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inner_ipc.OfflineMsgIPC.sname)
}
::std::string* OfflineMsgIPC::mutable_sname() {
  
  // @@protoc_insertion_point(field_mutable:inner_ipc.OfflineMsgIPC.sname)
  return sname_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OfflineMsgIPC::release_sname() {
  // @@protoc_insertion_point(field_release:inner_ipc.OfflineMsgIPC.sname)
  
  return sname_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OfflineMsgIPC::set_allocated_sname(::std::string* sname) {
  if (sname != NULL) {
    
  } else {
    
  }
  sname_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), sname);
  // @@protoc_insertion_point(field_set_allocated:inner_ipc.OfflineMsgIPC.sname)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailBody::kEmailTypeFieldNumber;
const int EmailBody::kEmailBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailBody::EmailBody()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inner_ipc.EmailBody)
}
EmailBody::EmailBody(const EmailBody& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emailbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emailbody().size() > 0) {
    emailbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emailbody_);
  }
  emailtype_ = from.emailtype_;
  // @@protoc_insertion_point(copy_constructor:inner_ipc.EmailBody)
}

void EmailBody::SharedCtor() {
  emailbody_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emailtype_ = 0;
  _cached_size_ = 0;
}

EmailBody::~EmailBody() {
  // @@protoc_insertion_point(destructor:inner_ipc.EmailBody)
  SharedDtor();
}

void EmailBody::SharedDtor() {
  emailbody_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmailBody::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailBody::descriptor() {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmailBody& EmailBody::default_instance() {
  protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmailBody* EmailBody::New(::google::protobuf::Arena* arena) const {
  EmailBody* n = new EmailBody;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmailBody::Clear() {
// @@protoc_insertion_point(message_clear_start:inner_ipc.EmailBody)
  emailbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  emailtype_ = 0;
}

bool EmailBody::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inner_ipc.EmailBody)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 emailType = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emailtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string emailBody = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailbody()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emailbody().data(), this->emailbody().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "inner_ipc.EmailBody.emailBody"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inner_ipc.EmailBody)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inner_ipc.EmailBody)
  return false;
#undef DO_
}

void EmailBody::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inner_ipc.EmailBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 emailType = 1;
  if (this->emailtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->emailtype(), output);
  }

  // string emailBody = 2;
  if (this->emailbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emailbody().data(), this->emailbody().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.EmailBody.emailBody");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->emailbody(), output);
  }

  // @@protoc_insertion_point(serialize_end:inner_ipc.EmailBody)
}

::google::protobuf::uint8* EmailBody::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner_ipc.EmailBody)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 emailType = 1;
  if (this->emailtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->emailtype(), target);
  }

  // string emailBody = 2;
  if (this->emailbody().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emailbody().data(), this->emailbody().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.EmailBody.emailBody");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->emailbody(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:inner_ipc.EmailBody)
  return target;
}

size_t EmailBody::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner_ipc.EmailBody)
  size_t total_size = 0;

  // string emailBody = 2;
  if (this->emailbody().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emailbody());
  }

  // int32 emailType = 1;
  if (this->emailtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emailtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailBody::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inner_ipc.EmailBody)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailBody* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmailBody>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inner_ipc.EmailBody)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inner_ipc.EmailBody)
    MergeFrom(*source);
  }
}

void EmailBody::MergeFrom(const EmailBody& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner_ipc.EmailBody)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.emailbody().size() > 0) {

    emailbody_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emailbody_);
  }
  if (from.emailtype() != 0) {
    set_emailtype(from.emailtype());
  }
}

void EmailBody::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inner_ipc.EmailBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailBody::CopyFrom(const EmailBody& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner_ipc.EmailBody)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailBody::IsInitialized() const {
  return true;
}

void EmailBody::Swap(EmailBody* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailBody::InternalSwap(EmailBody* other) {
  emailbody_.Swap(&other->emailbody_);
  std::swap(emailtype_, other->emailtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmailBody::GetMetadata() const {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmailBody

// int32 emailType = 1;
void EmailBody::clear_emailtype() {
  emailtype_ = 0;
}
::google::protobuf::int32 EmailBody::emailtype() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailBody.emailType)
  return emailtype_;
}
void EmailBody::set_emailtype(::google::protobuf::int32 value) {
  
  emailtype_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.EmailBody.emailType)
}

// string emailBody = 2;
void EmailBody::clear_emailbody() {
  emailbody_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmailBody::emailbody() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailBody.emailBody)
  return emailbody_.GetNoArena();
}
void EmailBody::set_emailbody(const ::std::string& value) {
  
  emailbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inner_ipc.EmailBody.emailBody)
}
#if LANG_CXX11
void EmailBody::set_emailbody(::std::string&& value) {
  
  emailbody_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inner_ipc.EmailBody.emailBody)
}
#endif
void EmailBody::set_emailbody(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emailbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inner_ipc.EmailBody.emailBody)
}
void EmailBody::set_emailbody(const char* value, size_t size) {
  
  emailbody_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inner_ipc.EmailBody.emailBody)
}
::std::string* EmailBody::mutable_emailbody() {
  
  // @@protoc_insertion_point(field_mutable:inner_ipc.EmailBody.emailBody)
  return emailbody_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailBody::release_emailbody() {
  // @@protoc_insertion_point(field_release:inner_ipc.EmailBody.emailBody)
  
  return emailbody_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailBody::set_allocated_emailbody(::std::string* emailbody) {
  if (emailbody != NULL) {
    
  } else {
    
  }
  emailbody_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailbody);
  // @@protoc_insertion_point(field_set_allocated:inner_ipc.EmailBody.emailBody)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int EmailMsgIPC::kSendRidFieldNumber;
const int EmailMsgIPC::kRecvRidFieldNumber;
const int EmailMsgIPC::kEmailTypeFieldNumber;
const int EmailMsgIPC::kEmailHeadFieldNumber;
const int EmailMsgIPC::kEmailBodyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

EmailMsgIPC::EmailMsgIPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inner_ipc.EmailMsgIPC)
}
EmailMsgIPC::EmailMsgIPC(const EmailMsgIPC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      emailbody_(from.emailbody_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  emailhead_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.emailhead().size() > 0) {
    emailhead_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emailhead_);
  }
  ::memcpy(&sendrid_, &from.sendrid_,
    reinterpret_cast<char*>(&emailtype_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(emailtype_));
  // @@protoc_insertion_point(copy_constructor:inner_ipc.EmailMsgIPC)
}

void EmailMsgIPC::SharedCtor() {
  emailhead_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sendrid_, 0, reinterpret_cast<char*>(&emailtype_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(emailtype_));
  _cached_size_ = 0;
}

EmailMsgIPC::~EmailMsgIPC() {
  // @@protoc_insertion_point(destructor:inner_ipc.EmailMsgIPC)
  SharedDtor();
}

void EmailMsgIPC::SharedDtor() {
  emailhead_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void EmailMsgIPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EmailMsgIPC::descriptor() {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const EmailMsgIPC& EmailMsgIPC::default_instance() {
  protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  return *internal_default_instance();
}

EmailMsgIPC* EmailMsgIPC::New(::google::protobuf::Arena* arena) const {
  EmailMsgIPC* n = new EmailMsgIPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void EmailMsgIPC::Clear() {
// @@protoc_insertion_point(message_clear_start:inner_ipc.EmailMsgIPC)
  emailbody_.Clear();
  emailhead_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&sendrid_, 0, reinterpret_cast<char*>(&emailtype_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(emailtype_));
}

bool EmailMsgIPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inner_ipc.EmailMsgIPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sendRid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recvRid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 emailType = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emailtype_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string emailHead = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_emailhead()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->emailhead().data(), this->emailhead().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "inner_ipc.EmailMsgIPC.emailHead"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .inner_ipc.EmailBody emailBody = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_emailbody()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inner_ipc.EmailMsgIPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inner_ipc.EmailMsgIPC)
  return false;
#undef DO_
}

void EmailMsgIPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inner_ipc.EmailMsgIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sendrid(), output);
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recvrid(), output);
  }

  // int32 emailType = 3;
  if (this->emailtype() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->emailtype(), output);
  }

  // string emailHead = 4;
  if (this->emailhead().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emailhead().data(), this->emailhead().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.EmailMsgIPC.emailHead");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->emailhead(), output);
  }

  // repeated .inner_ipc.EmailBody emailBody = 5;
  for (unsigned int i = 0, n = this->emailbody_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->emailbody(i), output);
  }

  // @@protoc_insertion_point(serialize_end:inner_ipc.EmailMsgIPC)
}

::google::protobuf::uint8* EmailMsgIPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner_ipc.EmailMsgIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sendrid(), target);
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recvrid(), target);
  }

  // int32 emailType = 3;
  if (this->emailtype() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->emailtype(), target);
  }

  // string emailHead = 4;
  if (this->emailhead().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->emailhead().data(), this->emailhead().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "inner_ipc.EmailMsgIPC.emailHead");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->emailhead(), target);
  }

  // repeated .inner_ipc.EmailBody emailBody = 5;
  for (unsigned int i = 0, n = this->emailbody_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->emailbody(i), deterministic, target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:inner_ipc.EmailMsgIPC)
  return target;
}

size_t EmailMsgIPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner_ipc.EmailMsgIPC)
  size_t total_size = 0;

  // repeated .inner_ipc.EmailBody emailBody = 5;
  {
    unsigned int count = this->emailbody_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->emailbody(i));
    }
  }

  // string emailHead = 4;
  if (this->emailhead().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->emailhead());
  }

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sendrid());
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recvrid());
  }

  // int32 emailType = 3;
  if (this->emailtype() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->emailtype());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EmailMsgIPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inner_ipc.EmailMsgIPC)
  GOOGLE_DCHECK_NE(&from, this);
  const EmailMsgIPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const EmailMsgIPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inner_ipc.EmailMsgIPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inner_ipc.EmailMsgIPC)
    MergeFrom(*source);
  }
}

void EmailMsgIPC::MergeFrom(const EmailMsgIPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner_ipc.EmailMsgIPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  emailbody_.MergeFrom(from.emailbody_);
  if (from.emailhead().size() > 0) {

    emailhead_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.emailhead_);
  }
  if (from.sendrid() != 0) {
    set_sendrid(from.sendrid());
  }
  if (from.recvrid() != 0) {
    set_recvrid(from.recvrid());
  }
  if (from.emailtype() != 0) {
    set_emailtype(from.emailtype());
  }
}

void EmailMsgIPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inner_ipc.EmailMsgIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EmailMsgIPC::CopyFrom(const EmailMsgIPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner_ipc.EmailMsgIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EmailMsgIPC::IsInitialized() const {
  return true;
}

void EmailMsgIPC::Swap(EmailMsgIPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void EmailMsgIPC::InternalSwap(EmailMsgIPC* other) {
  emailbody_.InternalSwap(&other->emailbody_);
  emailhead_.Swap(&other->emailhead_);
  std::swap(sendrid_, other->sendrid_);
  std::swap(recvrid_, other->recvrid_);
  std::swap(emailtype_, other->emailtype_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata EmailMsgIPC::GetMetadata() const {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// EmailMsgIPC

// int32 sendRid = 1;
void EmailMsgIPC::clear_sendrid() {
  sendrid_ = 0;
}
::google::protobuf::int32 EmailMsgIPC::sendrid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailMsgIPC.sendRid)
  return sendrid_;
}
void EmailMsgIPC::set_sendrid(::google::protobuf::int32 value) {
  
  sendrid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.EmailMsgIPC.sendRid)
}

// int32 recvRid = 2;
void EmailMsgIPC::clear_recvrid() {
  recvrid_ = 0;
}
::google::protobuf::int32 EmailMsgIPC::recvrid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailMsgIPC.recvRid)
  return recvrid_;
}
void EmailMsgIPC::set_recvrid(::google::protobuf::int32 value) {
  
  recvrid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.EmailMsgIPC.recvRid)
}

// int32 emailType = 3;
void EmailMsgIPC::clear_emailtype() {
  emailtype_ = 0;
}
::google::protobuf::int32 EmailMsgIPC::emailtype() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailMsgIPC.emailType)
  return emailtype_;
}
void EmailMsgIPC::set_emailtype(::google::protobuf::int32 value) {
  
  emailtype_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.EmailMsgIPC.emailType)
}

// string emailHead = 4;
void EmailMsgIPC::clear_emailhead() {
  emailhead_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& EmailMsgIPC::emailhead() const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailMsgIPC.emailHead)
  return emailhead_.GetNoArena();
}
void EmailMsgIPC::set_emailhead(const ::std::string& value) {
  
  emailhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:inner_ipc.EmailMsgIPC.emailHead)
}
#if LANG_CXX11
void EmailMsgIPC::set_emailhead(::std::string&& value) {
  
  emailhead_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:inner_ipc.EmailMsgIPC.emailHead)
}
#endif
void EmailMsgIPC::set_emailhead(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  emailhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:inner_ipc.EmailMsgIPC.emailHead)
}
void EmailMsgIPC::set_emailhead(const char* value, size_t size) {
  
  emailhead_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:inner_ipc.EmailMsgIPC.emailHead)
}
::std::string* EmailMsgIPC::mutable_emailhead() {
  
  // @@protoc_insertion_point(field_mutable:inner_ipc.EmailMsgIPC.emailHead)
  return emailhead_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* EmailMsgIPC::release_emailhead() {
  // @@protoc_insertion_point(field_release:inner_ipc.EmailMsgIPC.emailHead)
  
  return emailhead_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void EmailMsgIPC::set_allocated_emailhead(::std::string* emailhead) {
  if (emailhead != NULL) {
    
  } else {
    
  }
  emailhead_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), emailhead);
  // @@protoc_insertion_point(field_set_allocated:inner_ipc.EmailMsgIPC.emailHead)
}

// repeated .inner_ipc.EmailBody emailBody = 5;
int EmailMsgIPC::emailbody_size() const {
  return emailbody_.size();
}
void EmailMsgIPC::clear_emailbody() {
  emailbody_.Clear();
}
const ::inner_ipc::EmailBody& EmailMsgIPC::emailbody(int index) const {
  // @@protoc_insertion_point(field_get:inner_ipc.EmailMsgIPC.emailBody)
  return emailbody_.Get(index);
}
::inner_ipc::EmailBody* EmailMsgIPC::mutable_emailbody(int index) {
  // @@protoc_insertion_point(field_mutable:inner_ipc.EmailMsgIPC.emailBody)
  return emailbody_.Mutable(index);
}
::inner_ipc::EmailBody* EmailMsgIPC::add_emailbody() {
  // @@protoc_insertion_point(field_add:inner_ipc.EmailMsgIPC.emailBody)
  return emailbody_.Add();
}
::google::protobuf::RepeatedPtrField< ::inner_ipc::EmailBody >*
EmailMsgIPC::mutable_emailbody() {
  // @@protoc_insertion_point(field_mutable_list:inner_ipc.EmailMsgIPC.emailBody)
  return &emailbody_;
}
const ::google::protobuf::RepeatedPtrField< ::inner_ipc::EmailBody >&
EmailMsgIPC::emailbody() const {
  // @@protoc_insertion_point(field_list:inner_ipc.EmailMsgIPC.emailBody)
  return emailbody_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OfflineGoodsIPC::kSendRidFieldNumber;
const int OfflineGoodsIPC::kRecvRidFieldNumber;
const int OfflineGoodsIPC::kCountFieldNumber;
const int OfflineGoodsIPC::kGoodsIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OfflineGoodsIPC::OfflineGoodsIPC()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:inner_ipc.OfflineGoodsIPC)
}
OfflineGoodsIPC::OfflineGoodsIPC(const OfflineGoodsIPC& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&sendrid_, &from.sendrid_,
    reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(goodsid_));
  // @@protoc_insertion_point(copy_constructor:inner_ipc.OfflineGoodsIPC)
}

void OfflineGoodsIPC::SharedCtor() {
  ::memset(&sendrid_, 0, reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(goodsid_));
  _cached_size_ = 0;
}

OfflineGoodsIPC::~OfflineGoodsIPC() {
  // @@protoc_insertion_point(destructor:inner_ipc.OfflineGoodsIPC)
  SharedDtor();
}

void OfflineGoodsIPC::SharedDtor() {
}

void OfflineGoodsIPC::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OfflineGoodsIPC::descriptor() {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const OfflineGoodsIPC& OfflineGoodsIPC::default_instance() {
  protobuf_chat_5fdb_5fipc_2eproto::InitDefaults();
  return *internal_default_instance();
}

OfflineGoodsIPC* OfflineGoodsIPC::New(::google::protobuf::Arena* arena) const {
  OfflineGoodsIPC* n = new OfflineGoodsIPC;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OfflineGoodsIPC::Clear() {
// @@protoc_insertion_point(message_clear_start:inner_ipc.OfflineGoodsIPC)
  ::memset(&sendrid_, 0, reinterpret_cast<char*>(&goodsid_) -
    reinterpret_cast<char*>(&sendrid_) + sizeof(goodsid_));
}

bool OfflineGoodsIPC::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:inner_ipc.OfflineGoodsIPC)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 sendRid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sendrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 recvRid = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recvrid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 count = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 goodsId = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goodsid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:inner_ipc.OfflineGoodsIPC)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:inner_ipc.OfflineGoodsIPC)
  return false;
#undef DO_
}

void OfflineGoodsIPC::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:inner_ipc.OfflineGoodsIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sendrid(), output);
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recvrid(), output);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->goodsid(), output);
  }

  // @@protoc_insertion_point(serialize_end:inner_ipc.OfflineGoodsIPC)
}

::google::protobuf::uint8* OfflineGoodsIPC::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:inner_ipc.OfflineGoodsIPC)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sendrid(), target);
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recvrid(), target);
  }

  // int32 count = 3;
  if (this->count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->goodsid(), target);
  }

  // @@protoc_insertion_point(serialize_to_array_end:inner_ipc.OfflineGoodsIPC)
  return target;
}

size_t OfflineGoodsIPC::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:inner_ipc.OfflineGoodsIPC)
  size_t total_size = 0;

  // int32 sendRid = 1;
  if (this->sendrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->sendrid());
  }

  // int32 recvRid = 2;
  if (this->recvrid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->recvrid());
  }

  // int32 count = 3;
  if (this->count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->count());
  }

  // int32 goodsId = 4;
  if (this->goodsid() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->goodsid());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OfflineGoodsIPC::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:inner_ipc.OfflineGoodsIPC)
  GOOGLE_DCHECK_NE(&from, this);
  const OfflineGoodsIPC* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const OfflineGoodsIPC>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:inner_ipc.OfflineGoodsIPC)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:inner_ipc.OfflineGoodsIPC)
    MergeFrom(*source);
  }
}

void OfflineGoodsIPC::MergeFrom(const OfflineGoodsIPC& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:inner_ipc.OfflineGoodsIPC)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.sendrid() != 0) {
    set_sendrid(from.sendrid());
  }
  if (from.recvrid() != 0) {
    set_recvrid(from.recvrid());
  }
  if (from.count() != 0) {
    set_count(from.count());
  }
  if (from.goodsid() != 0) {
    set_goodsid(from.goodsid());
  }
}

void OfflineGoodsIPC::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:inner_ipc.OfflineGoodsIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OfflineGoodsIPC::CopyFrom(const OfflineGoodsIPC& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:inner_ipc.OfflineGoodsIPC)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OfflineGoodsIPC::IsInitialized() const {
  return true;
}

void OfflineGoodsIPC::Swap(OfflineGoodsIPC* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OfflineGoodsIPC::InternalSwap(OfflineGoodsIPC* other) {
  std::swap(sendrid_, other->sendrid_);
  std::swap(recvrid_, other->recvrid_);
  std::swap(count_, other->count_);
  std::swap(goodsid_, other->goodsid_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata OfflineGoodsIPC::GetMetadata() const {
  protobuf_chat_5fdb_5fipc_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_chat_5fdb_5fipc_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OfflineGoodsIPC

// int32 sendRid = 1;
void OfflineGoodsIPC::clear_sendrid() {
  sendrid_ = 0;
}
::google::protobuf::int32 OfflineGoodsIPC::sendrid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineGoodsIPC.sendRid)
  return sendrid_;
}
void OfflineGoodsIPC::set_sendrid(::google::protobuf::int32 value) {
  
  sendrid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineGoodsIPC.sendRid)
}

// int32 recvRid = 2;
void OfflineGoodsIPC::clear_recvrid() {
  recvrid_ = 0;
}
::google::protobuf::int32 OfflineGoodsIPC::recvrid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineGoodsIPC.recvRid)
  return recvrid_;
}
void OfflineGoodsIPC::set_recvrid(::google::protobuf::int32 value) {
  
  recvrid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineGoodsIPC.recvRid)
}

// int32 count = 3;
void OfflineGoodsIPC::clear_count() {
  count_ = 0;
}
::google::protobuf::int32 OfflineGoodsIPC::count() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineGoodsIPC.count)
  return count_;
}
void OfflineGoodsIPC::set_count(::google::protobuf::int32 value) {
  
  count_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineGoodsIPC.count)
}

// int32 goodsId = 4;
void OfflineGoodsIPC::clear_goodsid() {
  goodsid_ = 0;
}
::google::protobuf::int32 OfflineGoodsIPC::goodsid() const {
  // @@protoc_insertion_point(field_get:inner_ipc.OfflineGoodsIPC.goodsId)
  return goodsid_;
}
void OfflineGoodsIPC::set_goodsid(::google::protobuf::int32 value) {
  
  goodsid_ = value;
  // @@protoc_insertion_point(field_set:inner_ipc.OfflineGoodsIPC.goodsId)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace inner_ipc

// @@protoc_insertion_point(global_scope)
